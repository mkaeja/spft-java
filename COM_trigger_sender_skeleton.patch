Index: src/main/java/com/github/neuralabc/spft/task/Block.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/neuralabc/spft/task/Block.java b/src/main/java/com/github/neuralabc/spft/task/Block.java
--- a/src/main/java/com/github/neuralabc/spft/task/Block.java	(revision 759162e4f0f3757059e2c65efa43a85c80dd8e6c)
+++ b/src/main/java/com/github/neuralabc/spft/task/Block.java	(date 1661559574237)
@@ -1,5 +1,6 @@
 package com.github.neuralabc.spft.task;
 
+import com.github.neuralabc.spft.hardware.TriggerSender;
 import com.github.neuralabc.spft.task.config.BlockConfig;
 import com.github.neuralabc.spft.task.config.SequenceConfig;
 import com.github.neuralabc.spft.task.output.OutputSection;
@@ -21,9 +22,10 @@
     private final BlockConfig config;
     private final List<Trial> trials;
 
-    public Block(BlockConfig config, Map<String, SequenceConfig> sequencesPool) {
+    public Block(BlockConfig config, Map<String, SequenceConfig> sequencesPool, TriggerSender triggerSender) {
         this.config = config;
-        trials = config.getTrials().stream().map(trialConfig -> new Trial(trialConfig, sequencesPool)).collect(Collectors.toList());
+        //TODO: if you want to send triggers at the block level, keep it here in a member variable, if not just pass it to the Trial like i do here
+        trials = config.getTrials().stream().map(trialConfig -> new Trial(trialConfig, sequencesPool, triggerSender)).collect(Collectors.toList());
     }
 
     public void run(ExperimentFrame.Binding binding, Path outputFile) throws InterruptedException, IOException {
Index: src/main/java/com/github/neuralabc/spft/hardware/TriggerSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/neuralabc/spft/hardware/TriggerSender.java b/src/main/java/com/github/neuralabc/spft/hardware/TriggerSender.java
new file mode 100644
--- /dev/null	(date 1661560510168)
+++ b/src/main/java/com/github/neuralabc/spft/hardware/TriggerSender.java	(date 1661560510168)
@@ -0,0 +1,19 @@
+package com.github.neuralabc.spft.hardware;
+
+import com.fazecast.jSerialComm.SerialPort;
+
+public class TriggerSender {
+    private final SerialPort commPort;
+
+    public TriggerSender() {
+        commPort = SerialPort.getCommPort("SOME PORT NAME"); //TODO the name can be hardcoded here (easiest), read from a system property (less easy) or passed as parameter via the constructor coming from the UI where the user can choose which port, like with the force gauge (hardest)
+    }
+
+    public void send() {
+        //TODO: send data via commPort
+    }
+
+    public void stop() {
+        commPort.closePort();
+    }
+}
Index: src/main/java/com/github/neuralabc/spft/task/Trial.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/neuralabc/spft/task/Trial.java b/src/main/java/com/github/neuralabc/spft/task/Trial.java
--- a/src/main/java/com/github/neuralabc/spft/task/Trial.java	(revision 759162e4f0f3757059e2c65efa43a85c80dd8e6c)
+++ b/src/main/java/com/github/neuralabc/spft/task/Trial.java	(date 1661560370920)
@@ -1,5 +1,6 @@
 package com.github.neuralabc.spft.task;
 
+import com.github.neuralabc.spft.hardware.TriggerSender;
 import com.github.neuralabc.spft.task.config.SequenceConfig;
 import com.github.neuralabc.spft.task.config.TrialConfig;
 import com.github.neuralabc.spft.task.output.OutputSection;
@@ -21,13 +22,15 @@
 public class Trial {
     private static final Logger LOG = LoggerFactory.getLogger(Trial.class);
     private final TrialConfig config;
+    private final TriggerSender triggerSender;
     private final SequenceConfig sequence;
     private final CountDownLatch sync;
     private OutputSection leftReferenceOutput;
     private OutputSection rightReferenceOutput;
 
-    public Trial(TrialConfig config, Map<String, SequenceConfig> sequencesPool) {
+    public Trial(TrialConfig config, Map<String, SequenceConfig> sequencesPool, TriggerSender triggerSender) {
         this.config = config;
+        this.triggerSender = triggerSender;
         this.sequence = sequencesPool.get(config.getSequenceRef());
         if (hasLeftSequence()) {
             String sectionName = "leftReference";
@@ -56,6 +59,7 @@
         timer.start();
 
         sync.await();
+        triggerSender.send();
         timer.stop();
         writeOutput(outputFile);
     }
Index: src/main/java/com/github/neuralabc/spft/task/Session.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/neuralabc/spft/task/Session.java b/src/main/java/com/github/neuralabc/spft/task/Session.java
--- a/src/main/java/com/github/neuralabc/spft/task/Session.java	(revision 759162e4f0f3757059e2c65efa43a85c80dd8e6c)
+++ b/src/main/java/com/github/neuralabc/spft/task/Session.java	(date 1661560370908)
@@ -1,6 +1,7 @@
 package com.github.neuralabc.spft.task;
 
 import com.github.neuralabc.spft.hardware.ForceGauge;
+import com.github.neuralabc.spft.hardware.TriggerSender;
 import com.github.neuralabc.spft.hardware.TriggerTracker;
 import com.github.neuralabc.spft.task.config.SessionConfig;
 import com.github.neuralabc.spft.task.exceptions.OutputException;
@@ -31,6 +32,7 @@
     private static final double NANOS_IN_MILLI = 1e6;
     private final SessionConfig config;
     private final List<Block> blocks;
+    private final TriggerSender triggerSender;
     private ExperimentFrame.Binding uiBinding;
     private Path outputFile;
     private ForceGauge leftDevice;
@@ -51,8 +53,9 @@
             } else {
                 triggerTracker = TriggerTracker.NO_TRIGGERS;
             }
+            triggerSender = new TriggerSender();
 
-            blocks = config.getBlocks().stream().map(blockConfig -> new Block(blockConfig, config.getSequences())).collect(Collectors.toList());
+            blocks = config.getBlocks().stream().map(blockConfig -> new Block(blockConfig, config.getSequences(), triggerSender)).collect(Collectors.toList());
         } catch (FileNotFoundException ex) {
             throw new SessionException("Error opening configuration", ex);
         } catch (YAMLException ex) {
@@ -184,6 +187,8 @@
             LOG.warn("Interrupted session '{}'", config.getSessionName(), e);
         } catch (IOException e) {
             LOG.error("Problem writing output to {}", outputFile, e);
+        } finally {
+            triggerSender.stop();
         }
     }
 
